buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:3.3.3")
        classpath "io.spring.gradle:dependency-management-plugin:1.1.6"
    }
}

plugins {
    id 'java'
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"


//plugins {
//    id 'java'
//    id 'org.springframework.boot' version '3.3.3'
//    id 'io.spring.dependency-management' version '1.1.6'
//    id 'org.jetbrains.kotlin.jvm'
//}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // P6Spy 의존성 추가
    implementation 'p6spy:p6spy:3.9.1'
    implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.0'

    // Querydsl 의존성 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Spring Security 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Health Check 추가
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    // RandomStringUtils 추가
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'


    // 더미 데이터 만들 수 있는 Java Faker 추가
//    implementation 'com.github.javafaker:javafaker:1.0.2'
//    implementation 'org.yaml:snakeyaml:1.33'
}

tasks.named('test') {
    useJUnitPlatform()
}


// queyrdsl 설정
def querydslSrcDir = "$buildDir/generated/querydsl" // 생성될 클래스 위치 지정
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}